@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
  stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile architect.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect" -v -count=1 -timeout 120m -cover -coverprofile=coverage.out'
                     archiveArtifacts artifacts: 'coverage.out', allowEmptyArchive: false
                    }
                }
            }
        }

  stage('Generate Coverage Summary') {
            steps {
                script {
                    // Generate JSON coverage summary
                    sh 'groovy jenkins/tests/parseCoverage.groovy'
                }
            }
        }

stage('Generate Coverage Report') {
            steps {
                script {
                    def coverageJson = readJSON file: 'coverage.json'
                    def html = new StringBuilder()
                    html.append("""
                    <html>
                    <head>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                            .package { cursor: pointer; }
                            .hidden { display: none; }
                        </style>
                        <script>
                            function togglePackage(pkg) {
                                var files = document.getElementById(pkg);
                                if (files.style.display === "none") {
                                    files.style.display = "";
                                } else {
                                    files.style.display = "none";
                                }
                            }
                        </script>
                    </head>
                    <body>
                        <h2>Coverage Report</h2>
                        <div>Total Coverage: ${String.format("%.2f", coverageJson.totalCoverage)}%</div>
                        <table>
                            <tr>
                                <th>Package</th>
                                <th>Coverage</th>
                            </tr>
                    """)

                    coverageJson.coverageData.each { pkg, data ->
                        html.append("""
                        <tr class="package" onclick="togglePackage('${pkg}')">
                            <td>${pkg}</td>
                            <td>${String.format("%.2f", data.coverage)}%</td>
                        </tr>
                        <tr id="${pkg}" class="hidden">
                            <td colspan="2">
                                <table>
                                    <tr>
                                        <th>File</th>
                                        <th>Coverage</th>
                                    </tr>
                        """)
                        data.files.each { file, fileData ->
                            def fileCoverageUrl = "go tool cover -html=coverage.out -o ${file}.html"
                            html.append("""
                            <tr>
                                <td><a href="${fileCoverageUrl}">${file}</a></td>
                                <td>${String.format("%.2f", fileData.coverage)}%</td>
                            </tr>
                            """)
                        }
                        html.append("""
                                </table>
                            </td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>
                    </body>
                    </html>
                    """)

                    writeFile file: 'coverage-report.html', text: html.toString()
                    archiveArtifacts artifacts: 'coverage-report.html', allowEmptyArchive: false
                    archiveArtifacts artifacts: 'coverage.json', allowEmptyArchive: false

                    echo "Coverage report generated: ${env.WORKSPACE}/coverage-report.html"
                }
            }
        }
    }
}





 

    
