@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin"
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
    }
    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
    }

    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
        

        stage('Generate Report') {
            steps {
                script {
                    // Read the XML file content
                    def xmlContent = readFile 'test-results.xml'

                    // Extract test case information using regular expressions
                    def testCases = []
                    def testCasePattern = /<testcase\s+classname="([^"]+)"\s+name="([^"]+)"\s+time="([^"]+)"/
                    def failurePattern = /<failure\s+message="([^"]*)">(.*?)<\/failure>/
                    def skippedPattern = /<skipped\s+message="([^"]*)">(.*?)<\/skipped>/

                    def matcher = xmlContent =~ testCasePattern
                    while (matcher.find()) {
                        def classname = matcher.group(1)
                        def name = matcher.group(2)
                        def time = matcher.group(3)
                        def remainingText = xmlContent.substring(matcher.end())

                        def endIndex = remainingText.indexOf('</testcase>')
                        def details = endIndex != -1 ? remainingText.substring(0, endIndex) : ""

                        def result = [
                            name: name,
                            classname: classname,
                            time: time,
                            status: 'Passed',
                            reason: '',
                            log: details
                        ]

                        def failureMatcher = details =~ failurePattern
                        def skippedMatcher = details =~ skippedPattern
                        if (failureMatcher.find()) {
                            result.status = 'Failed'
                            result.reason = failureMatcher.group(1)
                            result.log = failureMatcher.group(2)
                        } else if (skippedMatcher.find()) {
                            result.status = 'Skipped'
                            result.reason = skippedMatcher.group(1)
                        }

                        testCases << result
                    }

                    // Generate HTML report
                    def html = new StringBuilder()
                    html.append("""
                    <html>
                    <head>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                            .passed { background-color: #d4edda; }
                            .failed { background-color: #f8d7da; }
                            .skipped { background-color: #fff3cd; }
                            .summary { margin-bottom: 20px; }
                            .summary div { margin: 5px 0; }
                            .link { color: #007bff; text-decoration: none; }
                            .reason-detail { display: block; white-space: pre-wrap; word-wrap: break-word; }
                            .test-case { border-left: 4px solid #dc3545; padding: 10px; margin-top: 20px; background-color: #f8d7da; }
                            .test-case h4 { margin: 0 0 10px 0; }
                            .test-case pre { white-space: pre-wrap; word-wrap: break-word; }
                        </style>
                    </head>
                    <body>
                        <h2>Test Results</h2>
                        <div class="summary">
                            <div>Total Tests: ${testCases.size()}</div>
                            <div style="color: green;">Total Passed: ${testCases.count { it.status == 'Passed' }}</div>
                            <div style="color: red;">Total Failed: ${testCases.count { it.status == 'Failed' }}</div>
                            <div style="color: orange;">Total Skipped: ${testCases.count { it.status == 'Skipped' }}</div>
                        </div>

                        <h3>Failed Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                                <th>Duration (s)</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Failed' }.each { result ->
                        html.append("""
                        <tr class="failed">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td><a href="#${result.name}" class="link">${result.name}</a></td>
                            <td>${result.time}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Skipped Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Skipped' }.each { result ->
                        html.append("""
                        <tr class="skipped">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td>${result.name}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Passed Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                                <th>Duration (s)</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Passed' }.each { result ->
                        html.append("""
                        <tr class="passed">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td><a href="#${result.name}" class="link">${result.name}</a></td>
                            <td>${result.time}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Test Details</h3>
                    """)

                    testCases.each { result ->
                        def statusClass = result.status == 'Passed' ? 'passed-test' : result.status == 'Failed' ? 'failed-test' : 'skipped-test'
                        html.append("""
                        <div id="${result.name}" class="test-case ${statusClass}">
                            <h4>${result.classname}.${result.name}</h4>
                            <p>Status: ${result.status}</p>
                            <p>Duration: ${result.time}s</p>
                            <div class="reason-detail">
                                <pre>${result.reason}</pre>
                                <pre>${result.log}</pre>
                            </div>
                        </div>
                        """)
                    }

                    html.append("""
                    </body>
                    </html>
                    """)

                    // Save the HTML report to a file
                    writeFile file: 'test-report.html', text: html.toString()

                    // Archive the HTML report as a build artifact
                    archiveArtifacts artifacts: 'test-report.html', allowEmptyArchive: false

                    // Optionally, print the location of the HTML report
                    echo "HTML report generated: \${env.WORKSPACE}/test-report.html"
                }
            }
        }
    }
}






    

    





 

    
