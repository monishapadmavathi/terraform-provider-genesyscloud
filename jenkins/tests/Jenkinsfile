@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }

stage('Generate & Upload Report') {
            
            steps {
script {
    // Step 1: Read the generated HTML file
    def htmlFile = readFile 'jenkins/tests/coverageAcceptance.html'
    def selectStart = htmlFile.indexOf('<select id="files">')
    def selectEnd = htmlFile.indexOf('</select>', selectStart)
    def fileCoverageSection = htmlFile.substring(selectStart, selectEnd + 9) // +9 to include </select>

    def packageCoverage = [:]
    def packageFiles = [:]
    def packageFileMap = [:] // To store package and their corresponding files
    def fileNumberMap = [:] // To store package and their corresponding file numbers

    // Step 2: Parse the existing options to calculate package-wise coverage
    fileCoverageSection.split('\n').each { line ->
        if (line.contains('<option value=')) {
            def fileNumber = line.substring(line.indexOf('value=') + 7, line.indexOf('>') - 1).trim()
            def filePath = line.substring(line.indexOf('>') + 1, line.indexOf(' (')).trim()
            def percentage = line.substring(line.indexOf('(') + 1, line.indexOf('%')).toFloat()
            def packageName = filePath.replaceFirst('terraform-provider-genesyscloud/genesyscloud/([^/]+)/.*', '$1')
            packageFiles[packageName] = (packageFiles[packageName] ?: []) + fileNumber
            packageCoverage[packageName] = (packageCoverage[packageName] ?: 0) + percentage

            // Collect files for each package
            if (!packageFileMap.containsKey(packageName)) {
                packageFileMap[packageName] = []
            }
            packageFileMap[packageName].add([fileNumber: fileNumber, filePath: filePath, percentage: percentage])
            fileNumberMap[filePath] = fileNumber
        }
    }

    // Step 3: Generate the package-wise coverage table with highlighting
    def packageCoverageRows = packageCoverage.collect { packageName, totalPercentage ->
        def averagePercentage = totalPercentage / packageFiles[packageName].size()
        def colorClass = averagePercentage < 50 ? 'light-red' : 'light-green'
        def fileRows = packageFileMap[packageName].collect { fileEntry ->
            return """
                <tr class='fileRow ${packageName}' style='display: none; cursor: pointer;' onclick='toggleFileContent("${fileEntry.fileNumber}")'>
                    <td>${fileEntry.filePath}</td>
                    <td>${String.format('%.1f', fileEntry.percentage)}%</td>
                </tr>
                <tr id='content_${fileEntry.fileNumber}' class='fileContentRow' style='display: none;'>
                    <td colspan='2'>
                        <pre class='file' id='${fileEntry.fileNumber}'>${htmlFile.substring(htmlFile.indexOf("<pre class=\"file\" id=\"${fileEntry.fileNumber}\""), htmlFile.indexOf("</pre>", htmlFile.indexOf("<pre class=\"file\" id=\"${fileEntry.fileNumber}\"")) + 6)}</pre>
                    </td>
                </tr>
            """
        }.join('\n')

        // Check if the package itself should be toggled
        def toggleAction = packageFiles[packageName].size() == 1 ? "toggleFileContent('${fileNumberMap[packageFiles[packageName][0]]}')" : "toggleFiles('${packageName}')"

        return """
            <tr class='${colorClass}' style='cursor: pointer;' onclick='${toggleAction}'>
                <td>${packageName}</td>
                <td>${String.format('%.1f', averagePercentage)}%</td>
            </tr>
            ${fileRows}
        """
    }.join('\n')

    // Define the CSS classes
    def cssStyles = """
        .light-green {
            background-color: #c8e6c9; /* light green */
        }
        .light-red {
            background-color: #ffcdd2; /* light red */
        }
        .fileRow {
            cursor: pointer;
        }
        .fileContentRow {
            background-color: #f5f5f5;
        }
    """.stripIndent()

    // Step 4: Prepare the HTML content
    def tableHtml = """
        <div id="packageCoverageTable">
            <table border="1">
                <thead>
                    <tr>
                        <th>Package</th>
                        <th>Coverage (%)</th>
                    </tr>
                </thead>
                <tbody id="packageCoverageBody">
                    ${packageCoverageRows}
                </tbody>
            </table>
        </div>
    """.stripIndent()

    def scriptHtml = """
        <script>
            function toggleFiles(packageName) {
                const rows = document.querySelectorAll('.fileRow.' + packageName);
                rows.forEach(row => {
                    row.style.display = row.style.display === 'none' ? 'table-row' : 'none';
                });
            }
            function toggleFileContent(fileId) {
                const contentRow = document.getElementById('content_' + fileId);
                if (contentRow) {
                    contentRow.style.display = contentRow.style.display === 'none' ? 'table-row' : 'none';
                }
            }
        </script>
    """.stripIndent()

    // Step 5: Remove the dropdown and insert the new table, script, and styles into the HTML file
    def updatedHtmlFile = htmlFile.replaceFirst('<select id="files">.*?</select>', '')
    updatedHtmlFile = updatedHtmlFile.replace('<div id="topbar">', '<!-- Removed topbar -->')
    updatedHtmlFile = updatedHtmlFile.replace('<div id="nav">', '<!-- Removed nav -->')
    updatedHtmlFile = updatedHtmlFile.replace('</head>', "<style>\n${cssStyles}\n</style>\n</head>")
    updatedHtmlFile = updatedHtmlFile.replace('</body>', tableHtml + '\n' + scriptHtml + '\n</body>')

    writeFile file: 'jenkins/tests/coverageAcceptance.html', text: updatedHtmlFile
}

     archiveArtifacts artifacts: 'jenkins/tests/coverageAcceptance.html', allowEmptyArchive: true   
           }
        }
    }
}
 



    



