@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }

stage('Generate & Upload Report') {
            
        steps {
script {
    // Step 1: Read the generated HTML file
    def htmlFile = readFile 'jenkins/tests/coverageAcceptance.html'
    def selectStart = htmlFile.indexOf('<select id="files">')
    def selectEnd = htmlFile.indexOf('</select>', selectStart)
    
    // Validate the indices before proceeding
    if (selectStart == -1 || selectEnd == -1) {
        error "Could not find '<select id=\"files\">' or '</select>' in the HTML file."
        return
    }
    
    def fileCoverageSection = htmlFile.substring(selectStart, selectEnd + 9) // +9 to include </select>

    def packageCoverage = [:]
    def packageFiles = [:]
    def filesInPackage = [:]
    def fileContents = [:]

    // Step 2: Parse the existing options to calculate package-wise coverage and store file contents
    fileCoverageSection.split('\n').each { line ->
        if (line.contains('<option value=')) {
            def filePathStart = line.indexOf('>') + 1
            def filePathEnd = line.indexOf(' (', filePathStart)
            if (filePathStart == -1 || filePathEnd == -1) {
                error "Could not extract file path and percentage from line: $line"
                return
            }
            def filePath = line.substring(filePathStart, filePathEnd).trim()
            
            def percentageStart = line.indexOf('(', filePathEnd) + 1
            def percentageEnd = line.indexOf('%', percentageStart)
            if (percentageStart == -1 || percentageEnd == -1) {
                error "Could not extract percentage from line: $line"
                return
            }
            def percentage = line.substring(percentageStart, percentageEnd).toFloat()
            
            def packageName = filePath.replaceFirst('terraform-provider-genesyscloud/genesyscloud/([^/]+)/.*', '$1')
            packageFiles[packageName] = (packageFiles[packageName] ?: 0) + 1
            packageCoverage[packageName] = (packageCoverage[packageName] ?: 0) + percentage
            filesInPackage[packageName] = (filesInPackage[packageName] ?: []) << filePath
            
            // Read the file content and store it
            def fileId = filePath.replaceAll('[-./]', '_')
            def fileContentStart = htmlFile.indexOf("<pre class=\"file\" id=\"${fileId}\"")
            if (fileContentStart != -1) {
                def fileContentEnd = htmlFile.indexOf("</pre>", fileContentStart) + 6
                fileContents[fileId] = htmlFile.substring(fileContentStart, fileContentEnd)
            } else {
                fileContents[fileId] = "File content not found for ${filePath}"
            }
        }
    }

    // Step 3: Generate the package-wise coverage table with hyperlinks to files
    def packageCoverageRows = packageCoverage.collect { packageName, totalPercentage ->
        def averagePercentage = totalPercentage / packageFiles[packageName]
        def colorClass = averagePercentage < 50 ? 'light-red' : 'light-green'
        def filesLinks = filesInPackage[packageName].collect { file ->
            def fileId = file.replaceAll('[-./]', '_')
            return "<li><a href='#' onclick='showFileCoverage(\"${fileId}\")'>${file}</a></li>"
        }.join('\n')
        return "<tr class='${colorClass}'><td><a href='#' onclick='toggleFileList(\"${packageName}\")'>${packageName}</a></td><td>${String.format('%.1f', averagePercentage)}%</td></tr><tr class='file-list' id='${packageName}' style='display: none'><td colspan='2'><ul>${filesLinks}</ul></td></tr>"
    }.join('\n')

    // Step 4: Prepare the HTML content
    def tableHtml = """
        <div id="packageCoverageTable">
            <table border="1">
                <thead>
                    <tr>
                        <th>Package</th>
                        <th>Coverage (%)</th>
                    </tr>
                </thead>
                <tbody id="packageCoverageBody">
                    ${packageCoverageRows}
                </tbody>
            </table>
        </div>
    """.stripIndent()

    def scriptHtml = """
        <script>
            function handleSelection() {
                const packageCoverageTable = document.getElementById('packageCoverageTable');
                packageCoverageTable.style.display = 'block';
                document.querySelectorAll('div[id^=\"fileTable\"]').forEach(table => table.style.display = 'none');
            }

            function toggleFileList(packageName) {
                const fileList = document.getElementById(packageName);
                fileList.style.display = fileList.style.display === 'none' ? 'block' : 'none';
            }

            function showFileCoverage(fileId) {
                const packageCoverageTable = document.getElementById('packageCoverageTable');
                packageCoverageTable.style.display = 'none';
                document.getElementById('content').style.display = 'block';
                document.getElementById('fileContent').innerHTML = fileContents[fileId] || 'File content not found';
                document.getElementById('backButton').style.display = 'block';
            }

            function goBack() {
                const packageCoverageTable = document.getElementById('packageCoverageTable');
                packageCoverageTable.style.display = 'block';
                document.getElementById('content').style.display = 'none';
                document.getElementById('backButton').style.display = 'none';
            }

            const fileContents = ${groovy.json.JsonOutput.toJson(fileContents)};

            document.addEventListener("DOMContentLoaded", handleSelection);
        </script>
    """.stripIndent()

    // Define the CSS classes
    def cssStyles = """
        <style>
            .light-green {
                background-color: #c8e6c9; /* light green */
            }
            .light-red {
                background-color: #ffcdd2; /* light red */
            }
            .file-list ul {
                list-style-type: none;
                padding: 0;
            }
            .file-list li {
                margin: 5px 0;
            }
            #backButton {
                margin-bottom: 10px;
            }
        </style>
    """.stripIndent()

    // Step 5: Insert the new option, table, and styles into the HTML file
    def updatedHtmlFile = htmlFile.replace('<select id="files">', '<select id="files" style="display:none" onchange="handleSelection()">\n')
    updatedHtmlFile = updatedHtmlFile.replace('</head>', cssStyles + '\n</head>')
    updatedHtmlFile = updatedHtmlFile.replace('<div id="content">', '<div id="backButton" style="display: none;"><button onclick="goBack()">Back</button></div>\n<div id="content" style="display: none;"><div id="fileContent"></div></div>')
    updatedHtmlFile = updatedHtmlFile.replace('File content not found for file0', '')
    updatedHtmlFile = updatedHtmlFile.replace('</body>', tableHtml + scriptHtml + '\n</body>')

    writeFile file: 'jenkins/tests/coverageAcceptance.html', text: updatedHtmlFile
}

     archiveArtifacts artifacts: 'jenkins/tests/coverageAcceptance.html', allowEmptyArchive: true   
           }
        }
    }
}
 



    



