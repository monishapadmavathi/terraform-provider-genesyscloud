@Library('pipeline-library') _

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

@NonCPS
def parseTestResults(xmlFile) {
    def results = []
    def xmlParser = new XmlParser()
    def testsuites = xmlParser.parse(xmlFile)

    testsuites.testsuite.each { testsuite ->
        testsuite.testcase.each { testcase ->
            def result = [:]
            result.name = testcase.@name
            result.classname = testcase.@classname
            result.time = testcase.@time
            result.status = 'Passed'
            result.reason = ''
            result.log = testcase.text()

            if (testcase.failure.size() > 0) {
                result.status = 'Failed'
                result.reason = testcase.failure[0].@message ?: 'No message'
                result.log = testcase.failure[0].text()
            } else if (testcase.skipped.size() > 0) {
                result.status = 'Skipped'
                result.reason = testcase.skipped[0].@message ?: 'No message'
            }
            
            results << result
        }
    }
    return results
}

@NonCPS
def generateHtmlReport(testResults) {
    def totalTests = testResults.size()
    def totalPassed = testResults.count { it.status == 'Passed' }
    def totalFailed = testResults.count { it.status == 'Failed' }
    def totalSkipped = testResults.count { it.status == 'Skipped' }

    def html = new StringBuilder()
    html << """
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .passed { background-color: #d4edda; }
            .failed { background-color: #f8d7da; }
            .skipped { background-color: #fff3cd; }
            .summary { margin-bottom: 20px; }
            .summary div { margin: 5px 0; }
            .link { color: #007bff; text-decoration: none; }
        </style>
    </head>
    <body>
        <h2>Test Results</h2>
        <div class="summary">
            <div>Total Tests: ${totalTests}</div>
            <div style="color: green;">Total Passed: ${totalPassed}</div>
            <div style="color: red;">Total Failed: ${totalFailed}</div>
            <div style="color: orange;">Total Skipped: ${totalSkipped}</div>
        </div>

        <h3>Failed Tests</h3>
        <table>
            <tr>
                <th>Status</th>
                <th>Class Name</th>
                <th>Test Name</th>
                <th>Duration (s)</th>
                <th>Reason</th>
            </tr>
    """

    testResults.findAll { it.status == 'Failed' }.each { result ->
        def statusClass = result.status.toLowerCase()
        html << """
        <tr class="${statusClass}">
            <td>${result.status}</td>
            <td>${result.classname}</td>
            <td><a href="#${result.name}" class="link">${result.name}</a></td>
            <td>${result.time}</td>
            <td>${result.reason}</td>
        </tr>
        """
    }

    html << """
        </table>

        <h3>Skipped Tests</h3>
        <table>
            <tr>
                <th>Status</th>
                <th>Class Name</th>
                <th>Test Name</th>
                <th>Reason</th>
            </tr>
    """

    testResults.findAll { it.status == 'Skipped' }.each { result ->
        def statusClass = result.status.toLowerCase()
        html << """
        <tr class="${statusClass}">
            <td>${result.status}</td>
            <td>${result.classname}</td>
            <td>${result.name}</td>
            <td>${result.reason}</td>
        </tr>
        """
    }

    html << """
        </table>

        <h3>Passed Tests</h3>
        <table>
            <tr>
                <th>Status</th>
                <th>Class Name</th>
                <th>Test Name</th>
                <th>Duration (s)</th>
            </tr>
    """

    testResults.findAll { it.status == 'Passed' }.each { result ->
        def statusClass = result.status.toLowerCase()
        html << """
        <tr class="${statusClass}">
            <td>${result.status}</td>
            <td>${result.classname}</td>
            <td><a href="#${result.name}" class="link">${result.name}</a></td>
            <td>${result.time}</td>
        </tr>
        """
    }

    html << """
        </table>

        <h3>Test Details</h3>
    """

    testResults.each { result ->
        html << """
        <div id="${result.name}" style="margin-top: 20px;">
            <h4>${result.classname}.${result.name}</h4>
            <p>Status: ${result.status}</p>
            <p>Duration: ${result.time}s</p>
            <p>Reason: ${result.reason}</p>
            <pre>${result.log}</pre>
        </div>
        """
    }

    html << """
    </body>
    </html>
    """
    
    return html.toString()
}

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin"
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
    }
    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
    }

    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
        
    stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile report.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect" -v -count=1 -timeout 120m -cover -coverprofile=coverageArchitect.out'
                    }
                }
            }
        }

       
        stage('Generate & Upload Report') {
            steps {

script {
                    // Assume the JUnit XML report is generated and saved as 'test-results.xml'
                    def testResults = parseTestResults('report.xml')
                    def htmlReport = generateHtmlReport(testResults)
                    
                    // Save the HTML report to a file
                    writeFile file: 'test-report.html', text: htmlReport

                    // Archive the HTML report as a build artifact
                    archiveArtifacts artifacts: 'test-report.html', allowEmptyArchive: false

                    // Optionally, print the location of the HTML report
                    echo "HTML report generated: ${env.WORKSPACE}/test-report.html"
                }



        }
    }
}
 

    
