@Library('pipeline-library') _
pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    environment {
        CREDENTIALS_ID  = "GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "us-east-1"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  10
    }
    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
    }

    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                sh 'rm -rf ~/.terraform.d/*'
                sh 'go mod tidy'
                sh 'go clean -i -r'
                echo 'Installing dependencies'
                sh 'go version'
                sh 'go mod download'
                sh 'go build -v .'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }

        stage('Acceptance Tests') {

            environment {
                TF_ACC=1
                TF_LOG = "DEBUG"
            }

            steps {
            catchError(buildResult: 'SUCCESS', stageResult:'FAILURE'){
                echo 'Attempting to Run Acceptance Tests'
                withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID',passwordVariable:'GENESYSCLOUD_OAUTHCLIENT_SECRET')])
                    {
                        echo 'Loading Genesys OAuth Credentials'
                        //sh 'go test ./genesyscloud/... -run TestAcc -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptance.out'
                    

        stage('Architect Tests') {
            steps {   
                script {
                    echo 'Running Architect Tests'
                    sh 'go test ./genesyscloud/... -run TestAcc.*Architect -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceArchitect.out'
                }
            }
        }
        
        stage('Flow Tests') {
            steps {
                script {
                    echo 'Running Flow Tests'
                    sh 'go test ./genesyscloud/... -run TestAcc.*Flow -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceFlow.out'
                }
            }
        }
        
        // stage('Idp Tests') {
        //     steps {
        //         script {
        //             echo 'Running Idp Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Idp -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceIdp.out'
        //         }
        //     }
        // }

        stage('Auth Tests') {
            steps {
                script {
                    echo 'Running Auth Tests'
                    sh 'go test ./genesyscloud/... -run TestAcc.*Auth -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceAuth.out'
                }
            }
        }

        // stage('Integration Tests') {
        //     steps {
        //         script {
        //             echo 'Running Integration Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Integration -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceIntegration.out'
        //         }
        //     }
        // }

        // stage('Journey Tests') {
        //     steps {
        //         script {
        //             echo 'Running Journey Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Journey -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceJourney.out'
        //         }
        //     }
        // }

        // stage('Knowledge Tests') {
        //     steps {
        //         script {
        //             echo 'Running Knowledge Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Knowledge -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceKnowledge.out'
        //         }
        //     }
        // }

        // stage('Outbound Tests') {
        //     steps {
        //         script {
        //             echo 'Running Outbound Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Outbound -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceOutbound.out'
        //         }
        //     }
        // }

        // stage('Routing Tests') {
        //     steps {
        //         script {
        //             echo 'Running Routing Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Routing -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceRouting.out'
        //         }
        //     }
        // }

        stage('ResponseManagement Tests') {
            steps {
                script {
                    echo 'Running ResponseManagement Tests'
                    sh 'go test ./genesyscloud/... -run TestAcc.*ResponseManagement -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceResponseManagement.out'
                }
            }
        }

        // stage('Export Tests') {
        //     steps {
        //         script {
        //             echo 'Running Export Tests'
        //             sh 'go test ./genesyscloud/... -run TestAcc.*Export -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceExport.out'
        //         }
        //     }
        // }

        // stage('Remaining Tests') {
        //     steps {
        //         script {
        //             echo 'Running Remaining Tests'
        //             sh 'go test ./genesyscloud/... -run "TestAcc^(?!.*(Architect|Flow|Idp|Auth|Integration|Journey|Knowledge|Outbound|Routing|ResponseManagement|Export)).*" -v -count=1 -timeout 120m -cover -coverprofile=coverageAcceptanceRemaining.out'
        //         }
        //     }
        // }
    }
                    
                    }
                }
            }
        

        stage('Generating Readable Coverage Report') {
            steps {
                sh 'go tool cover -html coverageAcceptance.out -o coverageAcceptance.html'
                sh 'go tool cover -html coverageUnit.out -o coverageUnit.html'


            }
        }


        stage('Uploading Coverage Report') {
            steps {
                archiveArtifacts artifacts: 'coverageAcceptance.html', allowEmptyArchive: true
                archiveArtifacts artifacts: 'coverageUnit.html', allowEmptyArchive: true
            }
        }


    } 
}
