@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
  stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile architect.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect" -v -count=1 -timeout 120m -cover -coverprofile=coverage.out'
                    }
                }
            }
        }


        stage('Generate Coverage Report') {
            steps {
                script {
                    // Create an initial HTML structure
                    def htmlContent = '''
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Package-wise Coverage Report</title>
                    </head>
                    <body>
                        <h1>Package-wise Coverage Report</h1>
                        <h2>Package-wise Coverage</h2>
                    '''
                    
                    // Find and generate package-wise coverage for all relevant packages
                    def packageCoverage = sh (
                        script: '''
                        go tool cover -func=coverage.out | grep -E '^terraform-provider-genesyscloud/genesyscloud/' | awk '
                        {
                            split($1, arr, "/");
                            package = arr[1] "/" arr[2] "/" arr[3] "/" arr[4];
                            packages[package]++;
                            total[package] += $3;
                            covered[package] += $2;
                        }
                        END {
                            for (package in packages) {
                                printf("<p>%s: %.1f%% of statements covered</p>\\n", package, (covered[package]/total[package])*100);
                            }
                        }'
                        ''',
                        returnStdout: true
                    ).trim()
                    
                    // Append package coverage to HTML content
                    htmlContent += packageCoverage
                    
                    // Add file-wise coverage details
                    htmlContent += '<h2>File-wise Coverage</h2>'
                    def fileCoverageHtml = sh (
                        script: '''
                        go tool cover -html=coverage.out
                        ''',
                        returnStdout: true
                    ).trim()
                    htmlContent += fileCoverageHtml.substring(fileCoverageHtml.indexOf("<body>") + 6, fileCoverageHtml.indexOf("</body>"))
                    
                    // Close the HTML file
                    htmlContent += '</body></html>'
                    
                    // Write the HTML content to a file
                    writeFile file: 'coverage.html', text: htmlContent
                    
                    // Archive the HTML file as a Jenkins artifact
                    archiveArtifacts artifacts: 'coverage.html', allowEmptyArchive: true
                }
            }
        }
    }
}


 

    
