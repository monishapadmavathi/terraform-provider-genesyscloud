@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
  stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile architect.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect" -v -count=1 -timeout 120m -cover -coverprofile=coverage.out'
                    }
                }
            }
        }

        stage('Test and Coverage') {
            steps {
                script {
                    // Run tests and generate coverage.out
                    sh 'go test -coverprofile=coverage.out ./...'

                    // Generate package-wise coverage data
                    def packageCoverage = [:]
                    def totalLines = [:]
                    def coveredLines = [:]

                    // Read coverage.out and calculate package-wise coverage
                    readFile('coverage.out').split('\n').each { line ->
                        if (line.startsWith('mode:')) return
                        def parts = line.split('\\s+')
                        def path = parts[0]
                        def statements = parts[1].split('/').collect { it as int }
                        def covered = statements[0]
                        def total = statements[1]
                        def packageName = path.replaceFirst('terraform-provider-genesyscloud/genesyscloud/[^/]+$', '')

                        totalLines[packageName] = (totalLines[packageName] ?: 0) + total
                        coveredLines[packageName] = (coveredLines[packageName] ?: 0) + covered
                    }

                    // Generate package-wise coverage report
                    packageCoverage.each { packageName, total ->
                        def covered = coveredLines[packageName]
                        def coveragePercent = covered / total * 100
                        packageCoverage[packageName] = coveragePercent
                    }

                    // Create initial HTML structure
                    writeFile(file: 'coverageAcceptance.html', text: '''
                        <!DOCTYPE html>
                        <html>
                        <head>
                            <title>Package-wise Coverage Report</title>
                        </head>
                        <body>
                            <h1>Package-wise Coverage Report</h1>
                            <h2>Package-wise Coverage</h2>
                    ''')

                    // Add package-wise coverage to HTML
                    packageCoverage.each { packageName, coveragePercent ->
                        appendFile(file: 'coverageAcceptance.html', text: "<p>${packageName}: ${coveragePercent}% of statements covered</p>\n")
                    }

                    // Add file-wise coverage details
                    appendFile(file: 'coverageAcceptance.html', text: '<h2>File-wise Coverage</h2>\n')
                    sh 'go tool cover -html=coverage.out >> coverageAcceptance.html'

                    // Close HTML file
                    appendFile(file: 'coverageAcceptance.html', text: '</body></html>\n')
                }
                 archiveArtifacts artifacts: 'coverageAcceptance.html', allowEmptyArchive: true
            }
        }
    }
}




                   
 

    
