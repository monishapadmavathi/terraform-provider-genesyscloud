@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
  stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile architect.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect" -v -count=1 -timeout 120m -cover -coverprofile=coverage.out'
                    }
                }
            }
        }

        stage('Test and Coverage') {
            steps {
                script {
                    // Step 1: Run tests and generate coverageAcceptance.html
                    sh 'go tool cover -html=coverage.out -o coverageAcceptance.html'

                    // Step 2: Parse the generated HTML file to calculate package-wise coverage
                    def htmlFile = readFile 'coverageAcceptance.html'
                    def selectStart = htmlFile.indexOf('<select id="files">')
                    def selectEnd = htmlFile.indexOf('</select>', selectStart)
                    def fileCoverageSection = htmlFile.substring(selectStart, selectEnd + 9) // +9 to include </select>

                    def packageCoverage = [:]
                    def packageFiles = [:]

                    fileCoverageSection.split('\n').each { line ->
                        if (line.contains('<option value=')) {
                            def filePath = line.substring(line.indexOf('>') + 1, line.indexOf(' (')).trim()
                            def percentage = line.substring(line.indexOf('(') + 1, line.indexOf('%')).toFloat()
                            def packageName = filePath.replaceFirst('terraform-provider-genesyscloud/genesyscloud/([^/]+)/.*', '$1')
                            packageFiles[packageName] = (packageFiles[packageName] ?: 0) + 1
                            packageCoverage[packageName] = (packageCoverage[packageName] ?: 0) + percentage
                        }
                    }

                    def packageCoverageHtml = new StringBuilder('<select id="packages">\n')
                    packageCoverage.each { packageName, totalPercentage ->
                        def averagePercentage = totalPercentage / packageFiles[packageName]
                        packageCoverageHtml.append("<option value=\"filepackage\">${packageName} (${String.format('%.1f', averagePercentage)}%)</option>\n")
                    }
                    packageCoverageHtml.append('</select>\n')

                    // Step 3: Append the package-wise coverage information to the HTML file
                    def updatedHtmlFile = htmlFile.replace('</body>', packageCoverageHtml.toString() + '</body>')
                    writeFile file: 'coverageAcceptance.html', text: updatedHtmlFile

                    // Step 4: Archive the HTML file as a Jenkins artifact
                    archiveArtifacts artifacts: 'coverageAcceptance.html', allowEmptyArchive: true
                }
            }
        }
    }
}
