@Library('pipeline-library') _

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin"
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
    }
    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
    }


    stages {

        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
sh 'pip install xmltodict --user'
            }
	    }
        stage('Run Tests and Generate Report') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                // Clean the Go module cache
                sh 'go clean -i -cache'
                
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Remaining Tests'
                    
                    // Run tests and generate JUnit XML report
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile report.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Architect -v -count=1 -timeout 120m -cover -coverprofile=coverageivr.out'
                    }
                }
                
                // Convert JUnit XML report to HTML
                sh 'junit2html report.xml report.html'

script {
    // Read the XML report content
    def xmlContent = readFile(env.XML_REPORT).trim()

    // Parse the XML content using XmlSlurper
    def xml = new XmlSlurper().parseText(xmlContent)

    // Remove test cases with "PASS" in their logs
    xml.testsuite.each { testsuite ->
        def toRemove = []
        testsuite.testcase.each { testcase ->
            def testcaseLog = testcase.'system-out'.text()
            if (testcaseLog.contains("PASS")) {
                toRemove << testcase
            }
        }
        toRemove.each { testsuite.remove(it) }
    }

    // Serialize the modified XML content
    def writer = new StringWriter()
    def xmlNodePrinter = new XmlNodePrinter(new PrintWriter(writer))
    xmlNodePrinter.print(xml)
    def modifiedXmlContent = writer.toString()

    // Write the modified XML content back to the report file
    writeFile(file: env.XML_REPORT, text: modifiedXmlContent)

    // Parse the modified XML to JSON
    def parsedXml = sh(script: "python -c 'import xmltodict, sys, json; print(json.dumps(xmltodict.parse(sys.stdin.read())))' <<< '${modifiedXmlContent}'", returnStdout: true).trim()
    def parsedJson = new groovy.json.JsonSlurperClassic().parseText(parsedXml)

    // Extract summary information
    def tests = parsedJson['testsuites']['@tests'].toInteger()
    def failures = parsedJson['testsuites']['@failures'].toInteger()
    def passed = tests - failures

    // Read the existing HTML report content
    def htmlContent = readFile(env.HTML_REPORT).trim()

    // Create summary lines with CSS styling
    def summaryLines = """
        <style>
            .summary { margin: 20px 0; }
            .summary h1 { font-size: 2em; margin-bottom: 10px; }
            .summary p { font-size: 1.5em; margin: 5px 0; }
            .summary .value { font-weight: bold; }
        </style>
        <div class="summary">
            <p>Tests: <span class="value">${tests}</span></p>
            <p>Failures: <span class="value">${failures}</span></p>
            <p>Passed: <span class="value">${passed}</span></p>
        </div>
    """

    // Insert summary lines after the line "Test Report : report.xml"
    def updatedHtmlContent = htmlContent.replaceFirst("(?i)(Test Report : report.xml\\s*)", summaryLines)

    // Write the updated content back to the HTML report
    writeFile(file: env.HTML_REPORT, text: updatedHtmlContent.trim())

    // Archive the updated HTML report as an artifact
    archiveArtifacts artifacts: env.HTML_REPORT, allowEmptyArchive: true
}





            }
        }
    }
}



    
