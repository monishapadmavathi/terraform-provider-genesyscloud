@Library('pipeline-library') 

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
        groovy 'Groovy 2.4.9'
    }
    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
		GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
        GROOVY_HOME = tool 'Groovy 2.4.9'
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin:${env.GROOVY_HOME}/bin"
     
    }


    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
	    }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }

stage('Generate & Upload Report') {
            
            steps {
script {
    // Step 1: Read the generated HTML file
    def htmlFile = readFile 'jenkins/tests/coverageAcceptance.html'
    def selectStart = htmlFile.indexOf('<select id="files">')
    def selectEnd = htmlFile.indexOf('</select>', selectStart)
    def fileCoverageSection = htmlFile.substring(selectStart, selectEnd + 9) // +9 to include </select>

    def packageCoverage = [:]
    def packageFiles = [:]

    // Step 2: Parse the existing options to calculate package-wise coverage
    fileCoverageSection.split('\n').each { line ->
        if (line.contains('<option value=')) {
            def filePath = line.substring(line.indexOf('>') + 1, line.indexOf(' (')).trim()
            def percentage = line.substring(line.indexOf('(') + 1, line.indexOf('%')).toFloat()
            def packageName = filePath.replaceFirst('terraform-provider-genesyscloud/genesyscloud/([^/]+)/.*', '$1')
            packageFiles[packageName] = (packageFiles[packageName] ?: []) + [filePath]
            packageCoverage[packageName] = (packageCoverage[packageName] ?: 0) + percentage
        }
    }

    // Step 3: Generate the package-wise coverage table with highlighting
    def packageCoverageRows = packageCoverage.collect { packageName, totalPercentage ->
        def averagePercentage = totalPercentage / packageFiles[packageName].size()
        def colorClass = averagePercentage < 50 ? 'light-red' : 'light-green'
        return "<tr class='${colorClass}' onclick='showFiles(\"${packageName}\")'><td>${packageName}</td><td>${String.format('%.1f', averagePercentage)}%</td></tr>"
    }.join('\n')

    def fileLists = packageFiles.collect { packageName, files ->
        def fileList = files.collect { file ->
            return "<li onclick='showFileContent(\"${file}\")'>${file}</li>"
        }.join('\n')
        return "<div id='files-${packageName}' class='file-list'><ul>${fileList}</ul></div>"
    }.join('\n')

    // Step 4: Prepare the HTML content
    def packageCoverageHtml = """
        <option value="packageCoverage" selected>Package-wise Coverage</option>
    """.stripIndent()

    def tableHtml = """
        <div id="packageCoverageTable">
            <table border="1">
                <thead>
                    <tr>
                        <th>Package</th>
                        <th>Coverage (%)</th>
                    </tr>
                </thead>
                <tbody id="packageCoverageBody">
                    ${packageCoverageRows}
                </tbody>
            </table>
        </div>
        ${fileLists}
    """.stripIndent()

    def scriptHtml = """
        <script>
            function handleSelection() {
                const select = document.getElementById('files');
                const packageCoverageTable = document.getElementById('packageCoverageTable');
                const fileLists = document.querySelectorAll('.file-list');
                const otherTables = document.querySelectorAll('div[id^="fileTable"]');
                if (select.value === 'packageCoverage') {
                    packageCoverageTable.style.display = 'block';
                    fileLists.forEach(list => list.style.display = 'none');
                    otherTables.forEach(table => table.style.display = 'none');
                } else {
                    packageCoverageTable.style.display = 'none';
                    fileLists.forEach(list => list.style.display = list.id === 'files-' + select.value ? 'block' : 'none');
                    otherTables.forEach(table => table.style.display = 'none');
                }
            }

            function showFiles(packageName) {
                document.getElementById('packageCoverageTable').style.display = 'none';
                document.querySelectorAll('.file-list').forEach(list => list.style.display = 'none');
                document.getElementById('files-' + packageName).style.display = 'block';
            }

            function showFileContent(fileName) {
                const contentDiv = document.getElementById('content');
                const xhr = new XMLHttpRequest();
                xhr.open('GET', fileName);
                xhr.onload = function() {
                    if (xhr.status === 200) {
                        contentDiv.innerHTML = '<button onclick="goBack()">Back</button><pre>' + xhr.responseText + '</pre>';
                        contentDiv.style.display = 'block';
                        document.getElementById('packageCoverageTable').style.display = 'none';
                        document.querySelectorAll('.file-list').forEach(list => list.style.display = 'none');
                    }
                };
                xhr.send();
            }

            function goBack() {
                const contentDiv = document.getElementById('content');
                contentDiv.style.display = 'none';
                handleSelection();
            }

            document.addEventListener("DOMContentLoaded", handleSelection);
            handleSelection();
        </script>
    """.stripIndent()

    def cssStyles = """
        <style>
            .light-green {
                background-color: #c8e6c9;
            }
            .light-red {
                background-color: #ffcdd2;
            }
            .file-list {
                display: none;
            }
            #content {
                display: none;
            }
        </style>
    """.stripIndent()

    // Step 5: Insert the new option, table, and styles into the HTML file
    def updatedHtmlFile = htmlFile.replace('<select id="files">', '<select id="files" onchange="handleSelection()">\n' + packageCoverageHtml)
    updatedHtmlFile = updatedHtmlFile.replace('</head>', cssStyles + '\n</head>')
    updatedHtmlFile = updatedHtmlFile.replace('</body>', tableHtml + scriptHtml + '\n</body>')

    writeFile file: 'jenkins/tests/coverageAcceptance.html', text: updatedHtmlFile
}

     archiveArtifacts artifacts: 'jenkins/tests/coverageAcceptance.html', allowEmptyArchive: true   
           }
        }
    }
}
 



    



